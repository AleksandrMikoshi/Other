global
    log /dev/log local0
    log /dev/log local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon
    maxconn 50000

    # Removing the HLUA warning
    tune.lua.bool-sample-conversion normal

    # Connecting a Lua script to distribute a page of active IPs
    lua-load /etc/haproxy/lua/active_ips.lua

defaults
    log global
    mode tcp
    option tcplog
    option dontlognull
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms

frontend vpn
    bind *:443
    mode tcp
    option tcplog

    # White/black list
    acl whitelist src -f /etc/haproxy/geoip/whitelist.lst
    acl blacklist src -f /etc/haproxy/geoip/blacklist.lst

    # Stick-table for IP tracking and flood protection
    stick-table type ip size 1m expire 10m store conn_cur,conn_cnt,conn_rate(10000)
    tcp-request connection track-sc0 src

    # Connection flood protection: if more than 5 new connections are made in 10 seconds, we block
    acl too_fast_conn sc0_conn_rate gt 5

    # We log and block attacks in order of priority
    tcp-request connection reject if too_fast_conn
    tcp-request connection reject if blacklist
    tcp-request connection reject if !whitelist

    default_backend vpn_servers

backend vpn_servers
    mode tcp
    # Main server
    server cisco_vpn_primary domain.com:443 check inter 5s fastinter 1s downinter 2s fall 3 rise 2
    # A backup server that always responds with "Connection refused"
    server maintenance_backup 127.0.0.1:1 backup

# List of users for authorization
userlist admin_users
    user admin insecure-password passwd!13
    user monitor insecure-password monitor123

# HAProxy's default statistics page
listen stats
    bind haproxy.domain.com:1936
    mode http
    stats enable
    stats hide-version
    stats uri /stats
    acl auth_ok http_auth(admin_users)
    http-request auth realm "Active IPs Admin" unless auth_ok

# Returning a page with active IPs via Lua
listen active_ips
    bind haproxy.domain.com:4500
    mode http
    acl auth_ok http_auth(admin_users)
    http-request auth realm "Active IPs Admin" unless auth_ok
    http-request deny if !{ path -i /active_ips.html }
    http-request use-service lua.active_ips if { path -i /active_ips.html }